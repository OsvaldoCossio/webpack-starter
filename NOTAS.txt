- En la terminal, crear un archivo package.json con el comando --> npm init
- Cambiar package name: (03-webpack-inicial) webpack-inicial.... llenar todos los valores (cuando no se desee llenar datos pasar al siguiente presionando enter). Para salir, enter en el ultimo valor, grabar y salir..

https://webpack.js.org/guides/getting-started/
PARA DESARROLLO
- Ejecutar en la terminal integrada: npm install webpack webpack-cli --save-dev  para cambiar configuracion de desarrolo del package.json y crear automaticamente la carpeta node_modules
- En package.json añadir en script propiedad "build": "webpack"
- Ejecutar con el comando npm run build, crea la carpeta dist (distribucion)
- Hacer la invocacion (en index.html) al main de dist.
-Crear archivo de configuracion webpack.config.js
 https://webpack.js.org/configuration/
https://webpack.js.org/loaders/html-loader/
- Instalar el html loader desde la terminal integrada con el comando: npm i -D html-loader html-webpack-plugin
- En webpack.config.js llenar:
const HtmlWebpack    = require('html-webpack-plugin')
module.exports = {
    
    mode: "development",

    output: {
        clean: true
    },

    module: {
        rules: [
            {
                test: /\.html$/,
                loader: 'html-loader',
                options: {
                    sources: false
                }
            }
        ]
    },

    plugins: [
        new HtmlWebpack({
            title: 'Mi Webpack App',
            // filename: 'index.html',
            template: './src/index.html'
        })
    ]
}

Esto copia automaticamente:  <script src="../dist/main.js">    </script> en index.html (no es el de dist)
- Ejecutar el comando: npm run build
- En la version index.html dist se copian 2 veces la referencia:
<script defer src="main.js"></script></head>
    <script src="../dist/main.js">    </script>
Entonces quitar la referencia en main.js (original), el webpack ya lo hace automaticamente.
- Tener el index y el html simplificado (en una sola linea).
89
WEBPACK Dev Server
WebPack para montar un local host
https://webpack.js.org/configuration/dev-server/
- Ejecutar en la consola integrada: npm i -D webpack-dev-server
- Añadir el siguiente script en package.json: "start": "webpack serve --config webpack.config.js --open --port=8080"
- Ejecutar en la consola integrada: npm run start .Abre el sitio web. Ya no se muestra el paquete bild (dist), ahora todo esta en memoria.
90
IMPORTAR ESTILO DE FORMA DINAMICA
- Crear archivo de estilo: css/components.css
- Ejecutar en la consola integrada: npm install --save-dev css-loader style-loader
Automaticamente añade en package.json
"css-loader": "^5.2.4",
"style-loader": "^2.0.0",
- Añadir nueva regla (webpack.config.js):
            {
                test: /\.css$/,
                exclude: /styles.css$/,
                use: [ 'style-loader', 'css-loader']
            },
- Añadir en el encabezado de componentes.js la referencia: import '../css/componentes.css';
- Ejecutar en la consola integrada: npm run start 
- Como cancelar el WebPack devServer: Ejecutar en la consola integrada: npm run build
- Si se cancela, se puede ver en el main de "dist" (distribucion) el style indigo como codigo javaScript. style-loader' y 'css-loader' lo convirtieron.
- Ver lo mismo en el servidor: npm run start >> en el navegador >> Opciones desarrollador>>Network>>js>>main.js (doble click), buscar indigo
91
ARCHIVO DE ESTILOS GLOBAL.
https://webpack.js.org/plugins/mini-css-extract-plugin/
- Crear nuevo archivo: src/styles.css
html, body {
    margin: 0;
    background-color: #ddd;
}

img { 
    width: 150px;
}
- Instalar npm install --save-dev mini-css-extract-plugin
- Añadir la referencia en webpack.config.js.
const MiniCssExtract = require('mini-css-extract-plugin');
- Añadir nueva regla en webpack.config.js
            {
                test: /styles.css$/,
                use: [ MiniCssExtract.loader, 'css-loader' ]
            }
plugins:
        new MiniCssExtract({
	    //usar el mismo nombre. Tambien se puede cambiar
            filename: '[name].css',
            ignoreOrder: false
        }),

- Invocar en src/index.js 
import './styles.css';
- Ejecutar en la consola integrada: npm run start 
- Detener crtl+c
- Probar en el bild de produccion: npm run build  
Se muestra con el nombre main.css, mas adelante vemos como conservar el nombre.
92
https://v4.webpack.js.org/loaders/file-loader/
- Crear carpeta: src/assets/img, copiar: webpack-logo.png
- En components.js importar: 
import webpacklogo from '../assets/img/webpack-logo.png';
Añadir: 
    const img = document.createElement('img');
    img.src = webpacklogo;
    document.body.append( img );
-  npm install file-loader --save-dev
- En webpack.config.js, añadir nueva regla.
            {
                test: /\.(png|jpe?g|gif)$/,
                loader: 'file-loader'
            }
- npm run start 
- Aplicar estilo (en styles.css): 
img { 
    width: 150px;
}
93
COPY PLUGIN
https://webpack.js.org/plugins/html-webpack-plugin/
- Invocar la imagen desde el html (comentarlo en componentes.js)
No se lo puede hacer asi
    <img src="assets/img/webpack-logo.png" alt="Webpack logo">
Apunta a: srs/assets/img
Debe apuntar en dist a: dist/assets/img
Es necesario copiar la estructura de directorios en el que esta el archivo de imagen. No existe: dist/assets
- npm install copy-webpack-plugin --save-dev
- En webpack.config.js
const CopyPlugin     = require("copy-webpack-plugin");
Añadir en plugins:
        new CopyPlugin({
            patterns: [
                { from: 'src/assets/', to: 'assets/' }
            ]
        })

- Para ver si lo copio en dist: npm run build
- Para ver si corre: npm run start 
94
Webpack modo produccion.
En modo produccion se necesita quitar comentarios, ofuscar codigo...
- Crear archivo webpack.prod.js
Copiar el contenido de webpack.config.js.
Cambiar mode por mode: "production"
- En package.json, se pueden crear 2 build que hagan 2 cosas:
    "build": "webpack --config webpack.prod.js",
    "build:dev": "webpack --config webpack.config.js",
Que reemplaza a:
    "build": "webpack",
- Ejecutar npm run build (Para ejecutar con el build:dev - npm run build:dev)
- Ver el main.js de build ya esta ofuscado 
- Tambien se puede cambiar las configuraciones en webpack.prod.js cambiando el plugins por:
        new MiniCssExtract({
            filename: '[name].[fullhash].css',
            ignoreOrder: false
        }),

Cambiar el nombre del main, cambiando el anterior output:
    output: {
        clean: true,
        filename: 'main.[contenthash].js'
    },
- npm run build
- Necesitamos todadia compactar el main***.css de dist
- Instalar: npm i -D css-minimizer-webpack-plugin terser-webpack-plugin
- En webpack.prod.js
const CssMinimizer = require('css-minimizer-webpack-plugin');
const Terser       = require('terser-webpack-plugin');
    optimization: {
        minimize: true,
        minimizer: [
            new CssMinimizer(),
            new Terser(),
        ]
    },
- npm run build. Ahora el css ya esta optimizado.
Instalacion y configuracion de Babel.
95
https://babeljs.io/
setup>>webpack
- npm install --save-dev babel-loader @babel/core
- Añadir el regla en webpack.prod.js (tambien puede ser en: webpack.config.js)
            {
                test: /\.m?js$/,
                exclude: /node_modules/,
                use: {
                  loader: "babel-loader",
                  options: {
                    presets: ['@babel/preset-env']
                  }
                }
            }
- npm install @babel/preset-env --save-dev
- Crear el archivo de configuracion: babel.config.json con:
{
  "presets": ["@babel/preset-env"]
}
- npm run build, para ver la generacion del codigo. Main de dist ya no tiene const; sino var en la definicion de la variable nombre (inicializado con "osvaldo").
- npm run build:dev, para ejecutar con la configuracion que no usa babel.















